/*
构造函数的类型
*/

//#include<iostream>
//using namespace std;
//
//class CPeople
//{
//public:
//
//	int Age;
//	double High;
//	char F;
//	CPeople(int a, double d)
//	{
//		Age = a;
//		High = d;
//	}//有参数的构造函数
//	CPeople(char);
//	//外部构造函数的声明要放在对应的类中
//};
//
//CPeople::CPeople(char c)
//{
//	F = c;
//}//构造函数写于类外时需要使用作用域符号
//
//int main()
//{
//	/*
//	
//	构造函数的类型：
//		无参数的构造函数：
//			如1.7.1中演示的构造函数，不多叙述
//		有参数的构造函数：
//			与正常的函数声明相同，但是在创建对象的时候，需要附带参数
//		多个构造函数：
//			一个类中可以存在多个构造函数，之间是重载关系，同样的通过传递的参数来进行区分
//		默认构造函数：
//			如果我们不手动声明一个构造函数，则系统会有一个默认的空构造函数，什么也不会执行，当我们手动书写构造函数之后，默认的构造函数就被覆盖了
//		多文件：
//			将类与结构体同样的书写在单独的.h头文件中，之后在类中对构造函数进行声明，之后在调用的主函数中对构造函数进行书写
//	
//	*/
//	CPeople cp1(23, 173.0);
//	//在对象创建的同时要给构造函数传递需要的参数
//	cout << cp1.Age << ' ' << cp1.High << endl;
//
//	CPeople* cp2 = new CPeople(25, 168.0);
//	//创建指针对象时候的构造函数的参数传递
//	cout << cp2->Age << ' ' << cp2->High << endl;
//
//	CPeople cp3('H');
//	cout << cp3.F << endl;
//
//
//	system("pause");
//	return 0;
//}